{
  "version": 3,
  "sources": ["../src/main.ts", "../src/sorter.ts", "../src/strategy/alphabetical.ts", "../src/strategy/code-guide.ts", "../src/strategy/custom.ts", "../src/strategy/idiomatic.ts", "../src/strategy/vuejs.ts"],
  "sourcesContent": ["import { ISortOption, Strategy } from \"./options\";\r\nimport { Sorter } from \"./sorter\";\r\nimport { AlphabeticalStrategy } from \"./strategy/alphabetical\";\r\nimport { CodeGuideStrategy } from \"./strategy/code-guide\";\r\nimport { CustomStrategy } from \"./strategy/custom\";\r\nimport { IdiomaticStrategy } from \"./strategy/idiomatic\";\r\nimport { VuejsStrategy } from \"./strategy/vuejs\";\r\n\r\nconst maps: Array<string> = [];\r\nconst attrs: Array<string> = [];\r\n\r\nexport function sortAttributes(\r\n    html: string,\r\n    options: ISortOption = { order: \"code-guide\" }\r\n) {\r\n    const replaced = html.replace(\r\n        // capture html tags\r\n        /<(?!\\/)[-:.\\w\\d@]+\\s(?:\"[^\"]*\"|'[^']*'|[^\"'])*?>/g,\r\n        (match: string) => {\r\n            return storeTags(match);\r\n        }\r\n    );\r\n\r\n    return restoreAttributes(replaced, options);\r\n}\r\n\r\nfunction storeTags(value: string) {\r\n    const index = maps.push(value) - 1;\r\n    return getTagPlaceholder(index.toString());\r\n}\r\n\r\nfunction storeAttributes(name: string, value: string) {\r\n    const index = attrs.push(value) - 1;\r\n    return getAttributePlaceholder(name, index.toString());\r\n}\r\n\r\nfunction getTagPlaceholder(index: string) {\r\n    return `___sort_tags_#___`.replace(\"#\", index);\r\n}\r\n\r\nfunction getAttributePlaceholder(name, index: string) {\r\n    return `${name}_attrs_#___`.replace(\"#\", index);\r\n}\r\n\r\nfunction restoreAttributes(content: string, options: ISortOption) {\r\n    return content.replace(\r\n        /___sort_tags_(\\d+)___/g,\r\n        (_match: string, p1: string) => {\r\n            const matched = maps[p1];\r\n            const replaced = matched.replace(\r\n                // capture attributes\r\n                /([-:.\\w\\d]+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\"'>\\s]+)/g,\r\n                (match: string, p1: string) => storeAttributes(p1, match)\r\n            );\r\n            const sorted = _sortAttributes(replaced, options);\r\n            const restored = sorted.replace(\r\n                /[-:.\\w\\d]+?_attrs_(\\d+)___/g,\r\n                (_match, p1) => attrs[p1]\r\n            );\r\n\r\n            return restored;\r\n        }\r\n    );\r\n}\r\n\r\nfunction _sortAttributes(content: string, options: ISortOption): string {\r\n    const strategy = getSortStrategy(options);\r\n    const sorter = new Sorter(strategy);\r\n\r\n    return content.replace(/(?<=<[-:.\\w\\d]+\\s)[^>]*?(?=\\/?>)/g, (match) => {\r\n        const splitted = match.split(/\\s/);\r\n        const filtered = splitted.filter((x) => x.length > 0);\r\n        const sorted = sorter.sort(filtered);\r\n        return sorted.join(\" \");\r\n    });\r\n}\r\n\r\nfunction getSortStrategy(options: ISortOption) {\r\n    switch (options.order) {\r\n        case \"alphabetical\":\r\n            return new AlphabeticalStrategy();\r\n        case \"code-guide\":\r\n            return new CodeGuideStrategy();\r\n        case \"idiomatic\":\r\n            return new IdiomaticStrategy();\r\n        case \"vuejs\":\r\n            return new VuejsStrategy();\r\n        case \"custom\":\r\n            return new CustomStrategy(options);\r\n    }\r\n\r\n    throw new Error(\r\n        `You can specify only [alphabetical|code-guide|idiomatic|vuejs] for sorting order`\r\n    );\r\n}\r\n", "export interface SortStrategy {\r\n    sort(attributes: string[]): string[];\r\n}\r\n\r\nexport class Sorter {\r\n    private strategy: SortStrategy;\r\n\r\n    constructor(strategy: SortStrategy) {\r\n        this.strategy = strategy;\r\n    }\r\n\r\n    public setStrategy(strategy: SortStrategy) {\r\n        this.strategy = strategy;\r\n    }\r\n\r\n    public sort(attributes: string[]): string[] {\r\n        return this.strategy.sort(attributes);\r\n    }\r\n}\r\n", "import { SortStrategy } from \"../sorter\";\r\n\r\nexport class AlphabeticalStrategy implements SortStrategy {\r\n    sort(attributes: string[]): string[] {\r\n        return attributes.sort();\r\n    }\r\n}\r\n", "import { SortStrategy } from \"../sorter\";\r\n\r\n/**\r\n * Code guide strategy\r\n * see: https://codeguide.co/\r\n */\r\nexport class CodeGuideStrategy implements SortStrategy {\r\n    private orderedAttrsRegex = [\r\n        \"class\",\r\n        \"id\",\r\n        \"name\",\r\n        \"data-.+\",\r\n        \"ng-.+\",\r\n        \"src\",\r\n        \"for\",\r\n        \"type\",\r\n        \"href\",\r\n        \"value\",\r\n        \"values\",\r\n        \"title\",\r\n        \"alt\",\r\n        \"role\",\r\n        \"aria-.+\",\r\n        \"tabindex\",\r\n        \"style\",\r\n    ];\r\n\r\n    sort(attributes: string[]): string[] {\r\n        const sorted: string[] = [];\r\n\r\n        this.orderedAttrsRegex.forEach((regex) => {\r\n            attributes.forEach((attr) => {\r\n                if (new RegExp(`^${regex}`).test(attr)) {\r\n                    sorted.push(attr);\r\n                }\r\n            });\r\n        });\r\n\r\n        const remainings = attributes.filter(\r\n            (attr) => sorted.indexOf(attr) === -1\r\n        );\r\n\r\n        return sorted.concat(remainings);\r\n    }\r\n}\r\n", "import { ISortOption } from \"../options\";\r\nimport { SortStrategy } from \"../sorter\";\r\n\r\n/**\r\n * Custom order strategy\r\n */\r\nexport class CustomStrategy implements SortStrategy {\r\n    private orderedAttrsRegex: string[] = [];\r\n\r\n    public constructor(options: ISortOption) {\r\n        if (options.customRegexes === undefined) {\r\n            throw new Error(\r\n                \"customRegexes is empty. You must specify custom order to use custom strategy\"\r\n            );\r\n        }\r\n\r\n        this.orderedAttrsRegex = options.customRegexes;\r\n    }\r\n\r\n    sort(attributes: string[]): string[] {\r\n        const sorted: string[] = [];\r\n\r\n        this.orderedAttrsRegex.forEach((regex) => {\r\n            attributes.forEach((attr) => {\r\n                if (new RegExp(`^${regex}`).test(attr)) {\r\n                    sorted.push(attr);\r\n                }\r\n            });\r\n        });\r\n\r\n        const remainings = attributes.filter(\r\n            (attr) => sorted.indexOf(attr) === -1\r\n        );\r\n\r\n        return sorted.concat(remainings);\r\n    }\r\n}\r\n", "import { SortStrategy } from \"../sorter\";\r\n\r\n/**\r\n * Idiomatic strategy\r\n * see: https://github.com/necolas/idiomatic-html#attribute-order\r\n */\r\nexport class IdiomaticStrategy implements SortStrategy {\r\n    private orderedAttrsRegex = [\"class\", \"id\", \"data-.+\"];\r\n\r\n    sort(attributes: string[]): string[] {\r\n        const sorted: string[] = [];\r\n\r\n        this.orderedAttrsRegex.forEach((regex) => {\r\n            attributes.forEach((attr) => {\r\n                if (new RegExp(`^${regex}`).test(attr)) {\r\n                    sorted.push(attr);\r\n                }\r\n            });\r\n        });\r\n\r\n        const remainings = attributes.filter(\r\n            (attr) => sorted.indexOf(attr) === -1\r\n        );\r\n\r\n        return sorted.concat(remainings);\r\n    }\r\n}\r\n", "import { SortStrategy } from \"../sorter\";\r\n\r\n/**\r\n * vuejs order\r\n * see: https://eslint.vuejs.org/rules/attributes-order.html\r\n */\r\nexport class VuejsStrategy implements SortStrategy {\r\n    private DEFINITION = [\"is\", \"v-is\"];\r\n    private LIST_RENDERING = [\"v-for\"];\r\n    private CONDITIONALS = [\"v-if\", \"v-else-if\", \"v-else\", \"v-show\", \"v-cloak\"];\r\n    private RENDER_MODIFIERS = [\"v-once\", \"v-pre\"];\r\n    private GLOBAL = [\"id\"];\r\n    private UNIQUE = [\"ref\", \"key\"];\r\n    private SLOT = [\"v-slot\", \"slot\"];\r\n    private TWO_WAY_BINDING = [\"v-model\"];\r\n    private OTHER_DIRECTIVES = /v-[-:\\w\\d]+/g;\r\n    private EVENTS = [\"@click\", \"v-on=\"];\r\n    private CONTENT = [\"v-text\", \"v-html\"];\r\n\r\n    private headingOrderedAttrsRegex = [\r\n        ...this.DEFINITION,\r\n        ...this.LIST_RENDERING,\r\n        ...this.CONDITIONALS,\r\n        ...this.RENDER_MODIFIERS,\r\n        ...this.GLOBAL,\r\n        ...this.UNIQUE,\r\n        ...this.SLOT,\r\n        ...this.TWO_WAY_BINDING,\r\n    ];\r\n\r\n    private tailOrderedAttrsRegex = [...this.EVENTS, ...this.CONTENT];\r\n\r\n    sort(attributes: string[]): string[] {\r\n        const head: string[] = [];\r\n        const tail: string[] = [];\r\n\r\n        this.headingOrderedAttrsRegex.forEach((regex) => {\r\n            attributes.forEach((attr) => {\r\n                if (\r\n                    new RegExp(`^${regex}(_attrs_\\\\d+___)?$`, \"gm\").test(attr)\r\n                ) {\r\n                    head.push(attr);\r\n                }\r\n            });\r\n        });\r\n\r\n        this.tailOrderedAttrsRegex.forEach((regex) => {\r\n            attributes.forEach((attr) => {\r\n                if (new RegExp(`^${regex}`).test(attr)) {\r\n                    tail.push(attr);\r\n                }\r\n            });\r\n        });\r\n\r\n        const remainings = attributes\r\n            .filter((attr) => head.indexOf(attr) === -1)\r\n            .filter((attr) => tail.indexOf(attr) === -1);\r\n\r\n        const customDirectives: string[] = remainings.filter((attr) =>\r\n            this.OTHER_DIRECTIVES.test(attr)\r\n        );\r\n\r\n        const remainingsWithoutCustomDirective = remainings.filter(\r\n            (attr) => customDirectives.indexOf(attr) === -1\r\n        );\r\n\r\n        return head\r\n            .concat(customDirectives)\r\n            .concat(remainingsWithoutCustomDirective)\r\n            .concat(tail);\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "sortAttributes", "__toCommonJS", "Sorter", "strategy", "attributes", "AlphabeticalStrategy", "attributes", "CodeGuideStrategy", "attributes", "sorted", "regex", "attr", "remainings", "CustomStrategy", "options", "attributes", "sorted", "regex", "attr", "remainings", "IdiomaticStrategy", "attributes", "sorted", "regex", "attr", "remainings", "VuejsStrategy", "attributes", "head", "tail", "regex", "attr", "remainings", "customDirectives", "remainingsWithoutCustomDirective", "maps", "attrs", "sortAttributes", "html", "options", "replaced", "match", "storeTags", "restoreAttributes", "value", "index", "getTagPlaceholder", "storeAttributes", "name", "getAttributePlaceholder", "content", "_match", "p1", "_sortAttributes", "strategy", "getSortStrategy", "sorter", "Sorter", "filtered", "x", "AlphabeticalStrategy", "CodeGuideStrategy", "IdiomaticStrategy", "VuejsStrategy", "CustomStrategy"]
}
